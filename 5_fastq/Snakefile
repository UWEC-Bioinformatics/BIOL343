configfile: "config.yaml"

SAMPLES = config["samples"]
ADAPT   = config["adapter"]
Q       = config["q"]
MLEN    = config["minlen"]

rule all:
    input:
        "report/multiqc_report.html"

rule fetch_fastq:
    output:
        "fastq_1/{sample}.fastq.gz"
    conda: "envs/main.yaml"
    shell:
        "parallel-fastq-dump --sra-id {wildcards.sample} --threads 8 --outdir fastq_1 --gzip"

rule fastq_qc:
    input:
        "fastq_1/{sample}.fastq.gz"
    output:
        html="fastqc_raw/{sample}_fastqc.html",
        zip ="fastqc_raw/{sample}_fastqc.zip"
    conda: "envs/main.yaml"
    shell:
        "fastqc {input} -o fastqc_raw -t 4"

rule trim_filter:
    input:
        "fastq_1/{sample}.fastq.gz"
    output:
        "trimmed/{sample}.trim.fastq.gz"
    conda: "envs/main.yaml"
    shell:
        "trimmed logs && "
        "cutadapt -a {ADAPT} -q {Q} -m {MLEN} "
        "-o {output} {input} > logs/cutadapt_{wildcards.sample}.txt"

rule trim_qc:
    input:
        "trimmed/{sample}.trim.fastq.gz"
    output:
        html="fastqc_trim/{sample}_fastqc.html",
        zip ="fastqc_trim/{sample}_fastqc.zip"
    conda: "envs/main.yaml"
    shell:
        "fastqc_trim && fastqc {input} -o fastqc_trim -t 4"

rule report:
    input:
        expand("fastqc_raw/{s}_fastqc.html",  s=SAMPLES),
        expand("fastqc_trim/{s}_fastqc.html", s=SAMPLES)
    output:
        "report/multiqc_report.html"
    conda: "envs/main.yaml"
    shell:
        "multiqc . -o report"
