configfile: "config_placenta.yaml"
     # directory("fastq_placenta_snakemake")
        # "fastq_placenta_snakemake/{wildcards.era_id}.fastq.gz"
        # expand("fastq_placenta_snakemake/{accessions}.fastq.gz", accessions = config_placenta["era_id"])
    # params:
    # #     "fastq_placenta_snakemake/{accessions}.fastq.gz
    # #     accession = config_placenta["era_id"],
    #     outdir = "fastq_placenta_snakemake"
# accessions= expand(config_placenta["era_id"])
def h(wildcards):
    return config["err_id"][wildcards.sample]

# for sample in samples:
rule all:
    input:
        "plots/quals.svg"
rule fastq_fetch:
    input:
        h
    output:
        # "fastq_placenta_snakemake/",
        "fastq_placenta_snakemake/{sample}.fastq.gz"
    shell: 
        "parallel-fastq-dump --sra-id {input} --threads 16 --outdir {output} --gzip"

rule fastq_qc:
    input:
        "fastq_placenta_snakemake/{wildcards.era_id}.fastq.gz"
        # files_location = "fastq_placenta_snakemake/{accessions}",
        # fastq_file_names = "fastq_placenta_snakemake/{accessions}"#, accessions = config_placenta["era_id"])
    output:
        directory("fastq_placenta_snakemake/placenta_qc"),
        "fastq_placenta_snakemake/placenta_qc/{wildcards.era_id}"

    shell: 
        "fastqc -t 16 fastq_placenta_snakemake/{wildcards.era_id}.fastq.gz -o fastq_placenta_snakemake/placenta_qc"
        # "fastqc -t 16 fastq_placenta_snakemake/*.fastq.gz -o fastq_placenta_snakemake/placenta_qc"

# rule trim_filter:
#     input: