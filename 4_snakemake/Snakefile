configfile: "config.yaml"
include: "mapping_rules.smk"
include: "snakemake-tutorial"
#include: "snakemake_file.smk" #can be used to refrence an additional snakemake file 
    #you can also define external workflows as modules -which can be useful if you are trying to extend a previous analysis without modifying it

rule all: #rule names can be used as a target if the rule has no wildcards 
    #having all at the top specifies the desired target files as input files
    input:
        "plots/quals.svg"
#######################
# def get_bwa_map_input_fastqs(wildcards):
#     return config["samples"][wildcards.sample]

# rule bwa_map: #all rules use this format with an input and an output
#     input:
#         "data/genome.fa",
#         get_bwa_map_input_fastqs
#         # "data/samples/{sample}.fastq"
#         #{sample} allows you to use this rule for multiple fastq files
#         #for example snakemake -np mapped_reads/{A,B}.bam the {A,B} allows you to list multiple output file names
#         #touch data/samples/A.fastq updates file
#     output:
#         temp("mapped_reads/{sample}.bam") #in a snakemake file you can name a new directory and it will automatically know to make the new directory if the directory doesn't exist yet
#     params:
#         rg=r"@RG\tID:{sample}\tSM:{sample}"
#     log:
#         "logs/bwa_mem/{sample}.log"    
#     benchmark: 
#         "benchmarks/{sample}.bwa.benchmark.txt" #indicates where to store benchmarking results (clock time and memory usage in MiB stored in tab delimited format) to perform multiple analyses in the same file in subsequent lines use repeat("file_name", #times)
#     threads: 8
#     shell:
#         "(bwa mem -R '{params.rg}' -t {threads} {input} | "
#         "samtools view -Sb - > {output}) 2> {log}"

# rule samtools_sort: #sorts reads and stores a sorted version in sorted_reads directory.... order?
#     input:
#         "mapped_reads/{sample}.bam"
#     output:
#         protected("sorted_reads/{sample}.bam")#protected makes certain that it can't be overwritten #never overwriting, new file for each step, this is a good practice, where each rule creates a new directory
#     shell:
#         "samtools sort -T sorted_reads/{wildcards.sample} " #this is the command that will actually be sent to the shell ie "snakemake -np sorted_reads/B.bam -O bam mapped_reads/B.bam"
#         #wildcards allows you to acess the objects attribute of sample number or name
#         "-O bam {input} > {output}"
###############

rule samtools_index: #index the bam so the output is index
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools index {input}"

rule bcftools_call:
    input:
        #defining variables
        fa="data/genome.fa",
        # bam=expand("sorted_reads/{sample}.bam", sample=SAMPLES),
        # bai=expand("sorted_reads/{sample}.bam.bai", sample=SAMPLES)
        bam=expand("sorted_reads/{sample}.bam", sample=config["samples"]),
        bai=expand("sorted_reads/{sample}.bam.bai", sample=config["samples"])
    params:
       rate=config["prior_mutation_rate"]["-P"]
    output:
        "calls/all.vcf" #produces a file of all of the files 
    log:
        "logs/bcftools_call/all.log"
    shell:
                                        #the list of all the bam files
        "(bcftools mpileup -f {input.fa} {input.bam} | "
        "bcftools call -mv -P {params.rate} - > {output}) 2> {log}"
        #snakemake --dag calls/all.vcf | dot -Tsvg > dag.svg will make a dag of all the vcfs

#can run python code if you make a file using python script and run the file using the terminal
rule plot_quals:
    input:
        "calls/all.vcf"
    output:
        "plots/quals.svg"
    script:
        "scripts/plot-quals.py"



